O que faz o JavaScript?
= Basicamente tudo

Cliente x Server 
Ao acessar Qualquer rede social você está acessando o lado da rede "Server" da internet

A5

• exemplo das variáveis com vagas de carro:
vaga a1 = carro1

- apenas 1 sinal de '=' tem valor 'recebe' ou seja vaga a1 recebe carro1 

• subistituindo o carro1 por carro2 na mesma variável
vaga a1 = carro1
     a1 = carro2

• para deixar o valor de a1 nulo na mesma variável
vaga a1 = carro1
     a1 = carro2
     a1 = null 

• Agora em JavaScript
var n1 = 5
var n2 = 8.5
var n3 = 15 

Outro exemplo em strings:

var s1 = 'JavaScript'
var s2 =  'CeV'
var s3 = 'Cauê'

-----------------------
A6 = DataTypes
Nessa aula falaremos sobre 'numbers' e 'strigs'

O sinal de + em Js tem sinal de concatenação
Ex:
var nome = window.prompt('Qual é Seu nome?')
alert('É um grande prazer te conhecer' + nome)

Ele irá mostrar no navegador da pessoa o nome digitado 
Dessa maneira abaixo não funociona, pois está implicito o ',', não o sinal de +: 
var nome = window.prompt('Qual é Seu nome?')
alert('É um grande prazer te conhecer', nome)

Diferenciação de String para Number

var n1 = window.prompt('Digite um Número: ') // Str
        var n2 = window.prompt('Digite outro Número: ') // Str
        var s = n1 + n2
        window.alert('A soma dos valores é ' + s) // Concatenação
        // (number + number) Para adição
        // (string + string) Para concatenação    

Para fazer a transição de str para number basta:
- Number.parseInt(n) 

Se caso quiser transformar a váriavel de outro valor para um número inteiro basta:
- Number.parseFloat(n)

Para Simplificar os dois casos onde n poderá valer um valor inteiro ou float basta:
- Number(window.prompt('Digite um Número: '))

Para converter float ou int para str:
n.toString ou String(n)

Formatação de Strings:
- > var s = 'JavaScript'
    undefined
  > s
    'JavaScript'
  
  > 'Eu estou estudando s' 
    'Eu estou estudando s'
  
  > 'Eu estou estudando ' + s
    'Eu estou estudando JavaScript'

Utilizando contatenação:
	> nome = 'caue'
	'caue'
	> idade = 19
	19
	> nota = 10
	10
	> nome
	'caue'
	> idade
	19
	> nota
	10
	> 'O aluno ' + nome + ' com ' + idade + ' anos tirou ' + nota
	'O aluno caue com 19 anos tirou 10'
	> 'O aluno ' + nome + ' com ' + idade + ' anos tirou ' + nota
	'O aluno caue com 19 anos tirou 10'

Utilizando da melhor maneira:
	> `O aluno ${nome} com ${idade} anos tirou ${nota}`
  	  'O aluno caue com 19 anos tirou 10'
 	   Obs: Lembrar sempre nas crases caso for utilizar dessa maneira, essa maneira 
      	        não é aplicável utilizando '' ou "".  

var s = 'JavaScript'

O 's.length' é o script usado para verificar quantos caracteres há na string

O 's.toUpperCase()' é o script usado para jogar todas as letras para MAIÚSCULAS
Já o 's.toLowerCase()' joga todas as letras para MINÚSCULAS

---
> var n1 = 1545.5
undefined

Utilizando o metódo:
> n1.toFixed(2)
'1545.50'
Podemos selecionar quantas casas decimais queremos após a virgula

Já utilizando o metódo:
> n1.toFixed(2).replace('.', ',')
'1545,50'
Podemos repor a vírgula no lugar do ponto

Já o metoódo:
> n1.toLocaleString('pt-Br', {style: 'currency', currency: 'BRL'})
'R$ 1.545,50'
Faz com que a variável n1 seja convertida para o valor de moeda do brasil

----
A7 = Operadores(pt.1)]

Operadores Aritmédicos no Js;
+, -, *, /, %, **
Todos operádores listados acima são operadores binários operadores que 
precisam de dois operandos;

5 + 2 = 7
5 - 2 = 3
5 * 2 = 10
5 / 2 = 2.5
5 % 2 = 1
5 ** 2 = 25

Ordem de Precedência dos Operadores Aritiméticos em JavaScript;

1.()        |
2.**        | 
3.*, /, %   |
4.+, -      ↓  

Atribuição simples dos Operadores;

var a = 5 + 3 - - - - - -|8| 
var b = a % 5 - - - - - -|3|
var c = 5 * b ** 2 - - - |45|
var d = 10 - a / 2 - - - |6|
var e = 6 * 2 / d - - - -|2|
var f = b % e + 4 / 3 - -|3|

Auto-atribuições;
var n = 3
n = n + 4 ou n += 4 || n aqui valerá 7
n = n - 5 ou n -= 5 || n aqui valerá 2
n = n * 4 ou n *= 4 || n aqui valerá 8
n = n / 2 ou n /= 2 || n aqui valerá 4
n = n ** 2 ou n **= 2 || n aqui valerá 16
n = n % 5 ou n %= 5 || n aqui valerá 1 

Incremento;
var x = 5  |5|
x = x + 1  |6|
x = x - 1  |5|

Utilizando o Incremento ficará assim:

var x = 5 |5|
x = x ++  |6|
x = x --  |5|

> var n = 10
 undefined
> n
 10
> n ++
 10
> n
 11
> n --
 11
> n
 10

-------
A8 Operadores pt.2
Opedadores Relacionais 
> Maior
< Menor
>= Maior que
<= Menor que
== igual
!= Diferente

Todos os resultados dos operadores relacionais retornarão valores booleanos
(True ou False) 

Ex's:
5 > 2 -> True
7 < 4 -> False
8 >= 8 -> True
9 <= 7 -> False
5 == 5 -> True
4 != 4 -> False

Ex's:
> 5 > 2
 true
> 8 < 4
 false
> var a = 8
 undefined
> var b = 15
 undefined
> a > b
 false
> a < b
 true
> a <= b - 10
 false
> a == b
 false
> a != b
 true

Identidade;
5 == 5 -> true
5 == '5' -> true 

Identidade total do mesmo valor e do mesmo tipo;
5 === '5' -> false
5 === 5 -> true 

Node.js
> 5 == 5
  true
> 5 == '5'
  true
> 5 === '5'
  false
> 5 === 5
  true

Outro ex:
Node.js
> var y = '5'
  undefined
> var x = 5
  undefined
> typeof y
  'string'
> typeof x
  'number'

Outro ex:
> var y = '5'
  undefined
> var x = 5
  undefined
> typeof y
  'string'
> typeof x
  'number'
> x == y
  true
> x === y
  false
> x != y
  false
> x !== y
  true

Operadores Lógicos:
! = negação
&& = conjução 'e'
|| = disjunção 'ou'

Negação:
! true = false
! false = true

Conjunção, Os dois valores tem que ser verdadeiros para o valor seja verdadeiro
caso contrário, será falso:
true && true -> true
true && false -> false
false && true -> false
false && false -> false

Disjunção, Os dois valores tem que ser falso para que o valor seja falso
caso contrário, será falso:
true || true -> true
true || false -> true
false || true -> true
false || false -> false

Ex's:
idade >= 15 && idade <= 17 // A idade está entre 15 e 17?
estado == 'RJ' || estado == 'SP' // O estado é Rj ou Sp?
salário > 1500 && sexo != 'M' // O salário é maior que 1500 e o sexo é DIFERENTE de Masculino?

Ordem de precedência do Js:
1.Operadores Aritiméticos
+, -, *, /, %, **, ()

Ordem deles; 
 1.()        |
 2.**        | 
 3.*, /, %   |
 4.+, -      ↓  

2.Operadores Relacionais
>, < , >=, <=, ==, != 
> Maior
< Menor
>= Maior que
<= Menor que
== igual
!= Diferente

3.Operadores Lógicos
!, &&, ||
! = negação
&& = conjução 'e'
|| = disjunção 'ou'

Operador ternário:
?, :
true ? true : false

ex:
média >= 7.0 ? "Aprovado" : "Reprovado" // Se a média for maior ou igual o valor será "Aprovado", 
                                        // Caso contrário será "Reprovado"

Node.js:
> media = 6
  6
> media >= 7.0 ? "Aprovado" : "Reprovado"
  'Reprovado'
> media += 2
  8
> media >= 7.0 ? "Aprovado" : "Reprovado"
  'Aprovado'

Node.js:
> var idade = 19
  undefined
> var r = idade >= 18 ? "Maior": "Menor" // A váriavel idade é maior ou igual a 18?, se sim mostre "Maior"
  undefined                              // Caso contrário Mostre "Menor"
> r
  'Maior'

A09 - Introdução ao DOM;

O que é o DOM?
DOM é o acrônimo para Document Object Model, Modelo de objetos para documentos

Árvore DOM:
          window
            |
    |-------|---------|
location  document  history 
            |
           html
            | 
        |--------|                 
       head     body
  |-----|        |      
meta  title      |
            |----|---|---|
            h1   p   p  div
                     |
                   strong

Nessa estrutura hierárquica os arquivos que estão em baixo, são CHILD e os que estão
em cima são parents
ex:
html e parent de document
porém head é child dele

Selecionando:
por Marca
   |
getElementsByTagName()
ex:
    <p>Aqui vai o resultado</p>
    <p>Aprendendo a usar o <strong>DOM</strong> em Javascript</p>
    <div>Clique em mim</div>
    <script>
      var p1 = window.document.getElementsByTagName('p')[0] // Irá selecionar o primeiro <p>
      window.document.write(p1.innerText)
    </script>

por ID
   |
getElementById()

por Nome
   |
getElementByName()

por Classe
   | 
getElementsByClassName()

por Seletor
   |
querySelector()
querySelectorAll()

Anotações de códigos:
	var corpo = window.document.body // seleciona o corpo do html
        var p1 = window.document.getElementsByTagName('p')[1] // seleciona o 'p' selecionado na caixa '[]'
        
        corpo.style.background = 'black' // altera a cor do fundo do site
        p1.style.color = 'blue' // altera a cor do 'p1'
        
        window.document.write('Está escrito assim ' + p1.innerText) // Printando no site o valor de p1
----

Toda classe no js é representada por um "."
E toda div é representada por uma "#"

pegar a url do doc:
function sayHello(){ var url = window.location.href.toString(); alert(url); } sayHello();

-------
Aula 10 | Eventos DOM

Eventos DOM;
       <DIV>
mousecenter | mousemove
mousedown   | mouseup
click       | mouseout

Para disparar esses eventos;	
function ação(parâmetro){
	bloco
}

Ex:
<div id="area" onclick="clicar()">
        Interaja...
    </div>
    <script>
        function clicar() { // criando função para clicar no elemento(div) definida acima
            var a = window.document.getElementById('area') // capturando o elemento da div pelo id 
            a.innerText = 'clicou' // Configurando ação para clique
        }

O elemento contido no getElementById tem que ser exatamente igual o da div definido anteriormente,
o nome da function também 

Outra maneira de fazer isso é utilizando o ".addEventListner"
Ex:

    <script>
        var a = window.document.getElementById('area')
        a.addEventListener('click', clicar)
        a.addEventListener('mouseenter', entrar)
        a.addEventListener('mouseout', sair)
    </script>

-------
A11 | Condições pt.1
Condições no JavaScript são instruções que permitem que um programa execute 
diferentes ações com base em determinadas condições. Essas condições são avaliadas
como verdadeiras ou falsas e são controladas por estruturas de controle de fluxo,
como if, else if, else e switch.

if no js:
if (condição) {
   true
{ else {
   false
}

// Tipos de condição

condição simples |
if (condição) {  | if (condição) {
   true          |     true
}                |} else { 
                 |     false
                 |}

Exs em Scripts:
var vel = 12
console.log(`A velocidade do seu carro é ${vel}Km/h`)
if (vel > 60) {
    console.log('Você Ultrapassou a velocidade Permitida, MULTADO!')
}
console.log('Dirija sempre usando o cinto de segurança!')


Ex's em um site:

<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Country</title>
</head>

<body>
  <h1>Sistema de Identificação</h1>
  <h2>Verificar nacionalidade</h2>
  <h3>Digite o seu pais de Origem:<input type="text" name="box" id="box">
    <input type="submit" value="Verificar" onclick="verificar()">
  </h3>
  <div id="res">
  </div>

  <script>
    function verificar() {
      var pais = 'Brasil'
      var bx = window.document.getElementById('box').value;
      var dv = window.document.querySelector('div#res');
      if (bx == 'Brasil' || 'brasil') {
        dv.innerHTML = 'Você é Brasileiro!';

      } else if (bx == 'Argentina' || 'argentina') {
        dv.innerHTML = 'Você é Argentino!';

      } else if (bx == 'Espanha' || 'espanha') {
        dv.innerHTML = 'Você é Espanhol!';

      } else if (bx == 'Portugal' || 'portugal') {
        dv.innerHTML = 'Você é Português!';
      } else {
        dv.innerHTML = 'Você é estrangeiro!';
      }
    }
  </script>

</body>

</html>

=========
A12 | Condições (Parte 2)
Condições Aninhadas;
São condições dentro de condições(if, else if) Basicamente 
ex:
if (cond) {
   bloco1
} else {
    if (cond2) {
       bloco2
    } else {  
       bloco 3
    } 
}

Condição Múltipla
            Valor
              | 
        ---------------    
        |   |    |    |   
    Valor Valor Valor Valor
        |   |    |    | 
        ---------------
              |
            Valor  

Ex em código:
switch(expressão) { // Irá realizar o teste da expressão
    case valor 1:
        bloco1
	break    
    case valor 2:
        bloco2
        break
    case valor 3:
        bloco3
        break
    default:  // Opcional
        bloco4
	break
}  

Para cada caso é nessesário um comando 'break', no 'default' ele é opcional
Ex´s
var agora = new Date() 
var diasem = agora.getDay() /* Essa função não retaornará o dia da semana 
//console.log(diasem)          Mas sim o número que o dia vale        */ 

/* 
   0 = Domingo
   1 = Segunda
   2 = Terça
   3 = Quarta
   4 = Quinta
   5 = Sexta
   6 = Sábado
*/

switch(diasem){
    case 0:
        console.log('Domingo')
        break
    case 1:
        console.log('Segunda-Feira')
        break
    case 2:
        console.log('Terça-Feira')
        break
    case 3:
        console.log('Quarta-Feira')
        break
    case 4:
        console.log('Quinta-Feira')
        break
    case 5:
        console.log('Sexta-Feira')
        break
    case 6:
        console.log('Sábado')
        break
    default:
        console.log('Dia inválido')
        break
    }   

Ao invés de criar uma estrutura de if e else, essa estrutura é mais indicada
para crição de "se" e "senão" 

Módulo E - Repetições em JavaScript
  - Repetições com teste no inicio 
  - Repetições com teste no final 
  - Repetição com controle 

A13 - Repetições pt.1
Em um exemplo direto podemos dar um exemplo de repetições em um algorito de "comer pizza"
ex:
function comerPizza() {
   comerFatia()
   comerFatia()	 
   comerFatia()
   comerFatia()
   comerFatia()
   comerFatia()
   comerFatia()
   comerFatia()	
}

Repetições testam expressões
Em uma estrutura dessas se uma condição for verdadeira ele vai executar um bloco só que ele não vai
prosseguir pro bloco que está abaixo, ele irá retornar para a condição e irá criar um laço, um looping
,uma repetição, até essa repetição for verdadeira, a partir do momento que esse losangulo for não
verdade, o laço é quebrado e o fluxo do programa seguirá normalmente.

Enquanto = While
Em js:
while (condição)

Script "Comer Fatia" com o while:

function comerPizza () {
    while (temFatia()) {
	comerFatia() 
    }
}

Outra maneira de fazer o bloco:
do {
  Condição
} while (condição)

-------------------
Todos códigos abaixo executão da mesma maneira, porém a melhor maneira é o primeiro

1)----
var c = 1
do {
    console.log(`Passo ${c}`)
    c++
} while (c <= 6) 
  
2)----
var c = 1
while (c <= 6) {
    console.log('Passo ${c}')
    c++
}

3)---- Pior solução
console.log('Tudo bem?')
console.log('Tudo bem?')
console.log('Tudo bem?')
console.log('Tudo bem?')
console.log('Tudo bem?')
console.log('Tudo bem?')

while = o teste lógico é feito no inicio
do while = o teste lógico é feito no final

A14 - Repetições pt.2
Estrutura de repetição com variável de controle
esse script assim como as outras estruturas de repetições irá retornar e criar um laço repetidas vezes
, só que dessa vez no momento do loop ele tambem fará o incremento e sendo verdadeiro mais uma vez o 
bloco é executado, essa estrutura é mais conhecida como estrutura de repetição com variável de controle

Ex do script:
 for(Inicio;teste;incr) {

}

A seguir estará um exemplo de um laço while e um laço for, os dois retornarão o mesmo resultado:

While:
var c=1
while (c<=10){
  console.log('Olá') 
  c++
}     
  
For:
for(var c=1; c<=10; c++){
  console.log('Olá') 
}

====
Terminal para debug: Run Current File

